package nbt

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BasicTag) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Header":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Header")
					return
				}
				switch msgp.UnsafeString(field) {
				case "TagID":
					{
						var zb0003 byte
						zb0003, err = dc.ReadByte()
						if err != nil {
							err = msgp.WrapError(err, "Header", "TagID")
							return
						}
						z.Header.TagID = TagID(zb0003)
					}
				case "Name":
					z.Header.Name, err = dc.ReadBytes(z.Header.Name)
					if err != nil {
						err = msgp.WrapError(err, "Header", "Name")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Header")
						return
					}
				}
			}
		case "Value":
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BasicTag) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Header"
	err = en.Append(0x82, 0xa6, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	// map header, size 2
	// write "TagID"
	err = en.Append(0x82, 0xa5, 0x54, 0x61, 0x67, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteByte(byte(z.Header.TagID))
	if err != nil {
		err = msgp.WrapError(err, "Header", "TagID")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Header.Name)
	if err != nil {
		err = msgp.WrapError(err, "Header", "Name")
		return
	}
	// write "Value"
	err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BasicTag) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Header"
	o = append(o, 0x82, 0xa6, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	// map header, size 2
	// string "TagID"
	o = append(o, 0x82, 0xa5, 0x54, 0x61, 0x67, 0x49, 0x44)
	o = msgp.AppendByte(o, byte(z.Header.TagID))
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendBytes(o, z.Header.Name)
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BasicTag) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Header":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Header")
					return
				}
				switch msgp.UnsafeString(field) {
				case "TagID":
					{
						var zb0003 byte
						zb0003, bts, err = msgp.ReadByteBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Header", "TagID")
							return
						}
						z.Header.TagID = TagID(zb0003)
					}
				case "Name":
					z.Header.Name, bts, err = msgp.ReadBytesBytes(bts, z.Header.Name)
					if err != nil {
						err = msgp.WrapError(err, "Header", "Name")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Header")
						return
					}
				}
			}
		case "Value":
			z.Value, bts, err = msgp.ReadBytesBytes(bts, z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BasicTag) Msgsize() (s int) {
	s = 1 + 7 + 1 + 6 + msgp.ByteSize + 5 + msgp.BytesPrefixSize + len(z.Header.Name) + 6 + msgp.BytesPrefixSize + len(z.Value)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TagHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TagID":
			{
				var zb0002 byte
				zb0002, err = dc.ReadByte()
				if err != nil {
					err = msgp.WrapError(err, "TagID")
					return
				}
				z.TagID = TagID(zb0002)
			}
		case "Name":
			z.Name, err = dc.ReadBytes(z.Name)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TagHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "TagID"
	err = en.Append(0x82, 0xa5, 0x54, 0x61, 0x67, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteByte(byte(z.TagID))
	if err != nil {
		err = msgp.WrapError(err, "TagID")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TagHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "TagID"
	o = append(o, 0x82, 0xa5, 0x54, 0x61, 0x67, 0x49, 0x44)
	o = msgp.AppendByte(o, byte(z.TagID))
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendBytes(o, z.Name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TagHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TagID":
			{
				var zb0002 byte
				zb0002, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "TagID")
					return
				}
				z.TagID = TagID(zb0002)
			}
		case "Name":
			z.Name, bts, err = msgp.ReadBytesBytes(bts, z.Name)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TagHeader) Msgsize() (s int) {
	s = 1 + 6 + msgp.ByteSize + 5 + msgp.BytesPrefixSize + len(z.Name)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TagID) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 byte
		zb0001, err = dc.ReadByte()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = TagID(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TagID) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteByte(byte(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TagID) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendByte(o, byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TagID) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 byte
		zb0001, bts, err = msgp.ReadByteBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = TagID(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TagID) Msgsize() (s int) {
	s = msgp.ByteSize
	return
}
