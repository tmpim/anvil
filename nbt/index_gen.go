package nbt

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *FlatIndexEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "P":
			z.P, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "P")
				return
			}
		case "A":
			z.A, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		case "C":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "C")
				return
			}
			if cap(z.C) >= int(zb0002) {
				z.C = (z.C)[:zb0002]
			} else {
				z.C = make([]int, zb0002)
			}
			for za0001 := range z.C {
				z.C[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "C", za0001)
					return
				}
			}
		case "H":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "H")
					return
				}
				z.H = nil
			} else {
				if z.H == nil {
					z.H = new(TagHeader)
				}
				err = z.H.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "H")
					return
				}
			}
		case "I":
			z.I, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "I")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FlatIndexEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "P"
	err = en.Append(0x85, 0xa1, 0x50)
	if err != nil {
		return
	}
	err = en.WriteInt(z.P)
	if err != nil {
		err = msgp.WrapError(err, "P")
		return
	}
	// write "A"
	err = en.Append(0xa1, 0x41)
	if err != nil {
		return
	}
	err = en.WriteInt(z.A)
	if err != nil {
		err = msgp.WrapError(err, "A")
		return
	}
	// write "C"
	err = en.Append(0xa1, 0x43)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.C)))
	if err != nil {
		err = msgp.WrapError(err, "C")
		return
	}
	for za0001 := range z.C {
		err = en.WriteInt(z.C[za0001])
		if err != nil {
			err = msgp.WrapError(err, "C", za0001)
			return
		}
	}
	// write "H"
	err = en.Append(0xa1, 0x48)
	if err != nil {
		return
	}
	if z.H == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.H.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "H")
			return
		}
	}
	// write "I"
	err = en.Append(0xa1, 0x49)
	if err != nil {
		return
	}
	err = en.WriteInt(z.I)
	if err != nil {
		err = msgp.WrapError(err, "I")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FlatIndexEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "P"
	o = append(o, 0x85, 0xa1, 0x50)
	o = msgp.AppendInt(o, z.P)
	// string "A"
	o = append(o, 0xa1, 0x41)
	o = msgp.AppendInt(o, z.A)
	// string "C"
	o = append(o, 0xa1, 0x43)
	o = msgp.AppendArrayHeader(o, uint32(len(z.C)))
	for za0001 := range z.C {
		o = msgp.AppendInt(o, z.C[za0001])
	}
	// string "H"
	o = append(o, 0xa1, 0x48)
	if z.H == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.H.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "H")
			return
		}
	}
	// string "I"
	o = append(o, 0xa1, 0x49)
	o = msgp.AppendInt(o, z.I)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FlatIndexEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "P":
			z.P, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "P")
				return
			}
		case "A":
			z.A, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
		case "C":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "C")
				return
			}
			if cap(z.C) >= int(zb0002) {
				z.C = (z.C)[:zb0002]
			} else {
				z.C = make([]int, zb0002)
			}
			for za0001 := range z.C {
				z.C[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "C", za0001)
					return
				}
			}
		case "H":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.H = nil
			} else {
				if z.H == nil {
					z.H = new(TagHeader)
				}
				bts, err = z.H.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "H")
					return
				}
			}
		case "I":
			z.I, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "I")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FlatIndexEntry) Msgsize() (s int) {
	s = 1 + 2 + msgp.IntSize + 2 + msgp.IntSize + 2 + msgp.ArrayHeaderSize + (len(z.C) * (msgp.IntSize)) + 2
	if z.H == nil {
		s += msgp.NilSize
	} else {
		s += z.H.Msgsize()
	}
	s += 2 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *IndexEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Pos":
			z.Pos, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Pos")
				return
			}
		case "Parent":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Parent")
					return
				}
				z.Parent = nil
			} else {
				if z.Parent == nil {
					z.Parent = new(IndexEntry)
				}
				err = z.Parent.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Parent")
					return
				}
			}
		case "Children":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
			if cap(z.Children) >= int(zb0002) {
				z.Children = (z.Children)[:zb0002]
			} else {
				z.Children = make([]*IndexEntry, zb0002)
			}
			for za0001 := range z.Children {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Children", za0001)
						return
					}
					z.Children[za0001] = nil
				} else {
					if z.Children[za0001] == nil {
						z.Children[za0001] = new(IndexEntry)
					}
					err = z.Children[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Children", za0001)
						return
					}
				}
			}
		case "Header":
			err = z.Header.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
		case "ListIndex":
			z.ListIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ListIndex")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *IndexEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Pos"
	err = en.Append(0x85, 0xa3, 0x50, 0x6f, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Pos)
	if err != nil {
		err = msgp.WrapError(err, "Pos")
		return
	}
	// write "Parent"
	err = en.Append(0xa6, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	if z.Parent == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Parent.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Parent")
			return
		}
	}
	// write "Children"
	err = en.Append(0xa8, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Children)))
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	for za0001 := range z.Children {
		if z.Children[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Children[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Children", za0001)
				return
			}
		}
	}
	// write "Header"
	err = en.Append(0xa6, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Header.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Header")
		return
	}
	// write "ListIndex"
	err = en.Append(0xa9, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ListIndex)
	if err != nil {
		err = msgp.WrapError(err, "ListIndex")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *IndexEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Pos"
	o = append(o, 0x85, 0xa3, 0x50, 0x6f, 0x73)
	o = msgp.AppendInt(o, z.Pos)
	// string "Parent"
	o = append(o, 0xa6, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74)
	if z.Parent == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Parent.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Parent")
			return
		}
	}
	// string "Children"
	o = append(o, 0xa8, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Children)))
	for za0001 := range z.Children {
		if z.Children[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Children[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Children", za0001)
				return
			}
		}
	}
	// string "Header"
	o = append(o, 0xa6, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	o, err = z.Header.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Header")
		return
	}
	// string "ListIndex"
	o = append(o, 0xa9, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.ListIndex)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Pos":
			z.Pos, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pos")
				return
			}
		case "Parent":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Parent = nil
			} else {
				if z.Parent == nil {
					z.Parent = new(IndexEntry)
				}
				bts, err = z.Parent.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Parent")
					return
				}
			}
		case "Children":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
			if cap(z.Children) >= int(zb0002) {
				z.Children = (z.Children)[:zb0002]
			} else {
				z.Children = make([]*IndexEntry, zb0002)
			}
			for za0001 := range z.Children {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Children[za0001] = nil
				} else {
					if z.Children[za0001] == nil {
						z.Children[za0001] = new(IndexEntry)
					}
					bts, err = z.Children[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Children", za0001)
						return
					}
				}
			}
		case "Header":
			bts, err = z.Header.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
		case "ListIndex":
			z.ListIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ListIndex")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *IndexEntry) Msgsize() (s int) {
	s = 1 + 4 + msgp.IntSize + 7
	if z.Parent == nil {
		s += msgp.NilSize
	} else {
		s += z.Parent.Msgsize()
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Children {
		if z.Children[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Children[za0001].Msgsize()
		}
	}
	s += 7 + z.Header.Msgsize() + 10 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *IndexWrapper) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(IndexWrapper, zb0002)
	}
	for zb0001 := range *z {
		err = (*z)[zb0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z IndexWrapper) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		err = z[zb0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z IndexWrapper) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		o, err = z[zb0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexWrapper) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(IndexWrapper, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z IndexWrapper) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		s += z[zb0003].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SelectiveIndex) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(SelectiveIndex, zb0002)
	}
	for zb0001 := range *z {
		err = (*z)[zb0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SelectiveIndex) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		err = z[zb0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SelectiveIndex) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		o, err = z[zb0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SelectiveIndex) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(SelectiveIndex, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SelectiveIndex) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		s += z[zb0003].Msgsize()
	}
	return
}
